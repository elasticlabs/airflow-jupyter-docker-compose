version: '3'

#
# Airflow software stack common config
#    - The "x-airflow-common" block sets the environment many containers share
x-airflow-common:
  &airflow-common
  build:
    context: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:${AIRFLOW_PASSWORD:-airflow}@postgres/airflow_db
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:${AIRFLOW_PASSWORD:-airflow}@postgres/airflow_db
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: '46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
  volumes:
    - airflow_dags:/opt/airflow/dags
    - airflow_scripts:/opt/airflow/scripts
    - airflow_logs:/opt/airflow/logs
    - airflow_plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
      - airflow

#
# Services begin here
services:
  airflow-proxy:
    image: ${COMPOSE_PROJECT_NAME}_nginx-proxy:latest
    container_name: ${COMPOSE_PROJECT_NAME}_nginx-proxy
    restart: unless-stopped
    expose:
      - "80"
    build:
      context: ./proxy
    environment:
      - DHPARAM_GENERATION=false
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - https_revproxy
      - airflow

  airflow-webserver:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_webserver
    command: webserver
    depends_on:
      - airflow-proxy
      - airflow-scheduler
    expose:
      - "8080"
    restart: unless-stopped

  flower:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_celery-flower
    command: celery flower
    expose:
      - "5555"
    restart: unless-stopped

  airflow-scheduler:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_scheduler
    command: scheduler
    depends_on:
      - airflow-worker-1
      - airflow-worker-2
    restart: unless-stopped

  airflow-worker-1:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_celery-worker-1
    command: celery worker
    restart: unless-stopped

  airflow-worker-2:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_celery-worker-2
    command: celery worker
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    container_name: ${COMPOSE_PROJECT_NAME}_airflow-init
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

  jupyter:
    container_name: ${COMPOSE_PROJECT_NAME}_jupyter-lab
    restart: unless-stopped
    expose: 
      - "8888"
    build:
      context: ./jupyter-lab
    depends_on:
      - airflow-proxy
    volumes:
      - airflow_dags:/opt/airflow/dags
      - airflow_scripts:/opt/airflow/scripts
      - jupyter_notebooks:/opt/airflow/notebooks
    environment:
      - PYTHONPATH=/opt/airflow/
    command: jupyter lab --port 8888 --allow-root
    networks:
      - airflow

  pgadmin:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres-pgadmin
    restart: unless-stopped
    expose: 
      - "80"
    build:
      context: ./pgadmin
    depends_on: 
      - postgres
      - airflow-proxy
    environment: 
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE='False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - airflow

  postgres:
    image: postgres:13
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    build:
      context: ./postgres
    expose:
      - "5432"
    stdin_open: true
    env_file: 
      - ./postgres/.env
    volumes:
      - postgres-dbdata:/var/lib/postgresql/data
      - postgres-dbbackups:/pg_backups
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow", "-d", "airflow_db"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - airflow

  redis:
    image: redis:latest
    container_name: ${COMPOSE_PROJECT_NAME}_redis
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - airflow

  geoserver:
    container_name: ${COMPOSE_PROJECT_NAME}_geoserver
    image: ${COMPOSE_PROJECT_NAME}_geoserver:${GS_VERSION}
    restart: unless-stopped
    expose:
      - "8080" 
    build:
      context: ./geoserver
    depends_on: 
      - airflow-proxy
      - postgres
      - pgadmin
    volumes:
      - geoserver-data:/var/local/geoserver
      - geoserver-exts:/var/local/geoserver-exts   
    networks:
      - airflow

volumes:
  postgres-dbdata:
  postgres-dbbackups:
  pgadmin_data:
  airflow_dags:
  airflow_scripts:
  airflow_logs:
  airflow_plugins:
  jupyter_notebooks:
  geoserver-data:
  geoserver-exts:

# Networks. Note that the following network should be existing and connected 
# to your nginx-proxy container for proper docker-gen containers detections, 
# and further SSL certificates creation.
networks:
  https_revproxy:
    external:
      name: ${APPS_NETWORK}
  airflow:
