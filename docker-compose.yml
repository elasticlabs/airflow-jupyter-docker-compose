version: '3.7'
services:
  #
  # Proxy - HTTP entrypoint
  airflow-proxy:
    image: nginx-proxy4${COMPOSE_PROJECT_NAME}:latest
    container_name: nginx-proxy4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "80"
    build:
      context: ./proxy
    environment:
      - DHPARAM_GENERATION=false
      - VIRTUAL_HOST=${VIRTUAL_HOST}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${VIRTUAL_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - https_revproxy
      - airflow

  airflow:
    container_name: airflow-admin4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose:
      - "8080"
    build:
      context: ./airflow
    depends_on:
      - airflow-proxy
      - postgres
      - redis
    environment:
      - LOAD_EX=n
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
      - PYTHONPATH=/usr/local/airflow
    env_file:
      - ./airflow/.env
    volumes:
      - airflow_config:/usr/local/airflow/
      - airflow_dags:/usr/local/airflow/dags
      - airflow_scripts:/usr/local/airflow/scripts
      - /var/run/docker.sock:/tmp/docker.sock:ro
    command: airflow webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - airflow

  flower:
    container_name: ${COMPOSE_PROJECT_NAME}_celery-admin
    restart: unless-stopped
    expose:
      - "5555"
    image: ${COMPOSE_PROJECT_NAME}_celery-admin:latest
    build:
      context: ./airflow
    restart: always
    depends_on:
      - redis
    environment:
      - EXECUTOR=Celery
    command: airflow flower -u flower
    networks:
      - airflow

  scheduler:
    container_name: ${COMPOSE_PROJECT_NAME}_scheduler
    restart: unless-stopped
    build:
      context: ./airflow
    depends_on:
      - airflow-proxy
    volumes:
      - airflow_dags:/usr/local/airflow/dags
      - airflow_scripts:/usr/local/airflow/scripts
    environment:
      - LOAD_EX=n
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
      - PYTHONPATH=/usr/local/airflow
    command: airflow scheduler
    env_file:
      - ./airflow/.env
    networks:
      - airflow
  
  worker1:
    container_name: ${COMPOSE_PROJECT_NAME}-worker_a
    restart: unless-stopped
    build:
      context: ./airflow
    restart: always
    depends_on:
      - scheduler
    volumes:
      - airflow_dags:/usr/local/airflow/dags
      - airflow_scripts:/usr/local/airflow/scripts
    environment:
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
      - PYTHONPATH=/usr/local/airflow
    command: airflow worker
    env_file:
      - ./airflow/.env
    networks:
      - airflow

  worker2:
    container_name: ${COMPOSE_PROJECT_NAME}-worker_b
    restart: unless-stopped
    build:
      context: ./airflow
    restart: always
    depends_on:
      - scheduler
    volumes:
      - airflow_dags:/usr/local/airflow/dags
      - airflow_scripts:/usr/local/airflow/scripts
    environment:
      - FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - EXECUTOR=Celery
      - PYTHONPATH=/usr/local/airflow
    command: airflow worker
    env_file:
      - ./airflow/.env
    networks:
      - airflow 
  
  redis:
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: unless-stopped
    image: redis:5.0.5
    networks:
      - airflow

  jupyter:
    container_name: jupyter-lab4${COMPOSE_PROJECT_NAME}
    restart: unless-stopped
    expose: 
      - "8888"
    build:
      context: ./airflow
    depends_on:
      - airflow-proxy
    volumes:
      - airflow_dags:/usr/local/airflow/dags
      - airflow_scripts:/usr/local/airflow/scripts
      - jupyter_notebooks:/usr/local/airflow/notebooks
    environment:
      - PYTHONPATH=/usr/local/airflow
    command: jupyter lab --port 8888 --allow-root
    env_file:
      - ./airflow/.env
    networks:
      - airflow

  pgadmin:
    container_name: ${COMPOSE_PROJECT_NAME}_postgressql-pgadmin
    restart: unless-stopped
    expose: 
      - "80"
    build:
      context: ./pgadmin
    environment: 
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE='False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - '/tmp/servers.json:/servers.json'
    networks:
      - airflow

  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}_postgresql
    restart: unless-stopped
    build:
      context: ./postgres
    expose:
      - "5432" 
    stdin_open: true
    env_file: 
      - ./postgres/.env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    networks:
      - airflow

  geoserver:
    container_name: ${COMPOSE_PROJECT_NAME}_geoserver
    image: ${COMPOSE_PROJECT_NAME}_geoserver:${GS_VERSION}
    restart: unless-stopped
    expose:
      - "8080" 
    build:
      context: ./geoserver
    depends_on: 
      - airflow-proxy
      - postgres
      - pgadmin
    volumes:
      - geoserver-data:/var/local/geoserver
      - geoserver-exts:/var/local/geoserver-exts   
    networks:
      - airflow

volumes:
  pgadmin_data:
  airflow_dags:
  airflow_scripts:
  jupyter_notebooks:
  geoserver-data:
  geoserver-exts:
  dbdata:
  dbbackups:

# Networks. Note that the following network should be existing and connected 
# to your nginx-proxy container for proper docker-gen containers detections, 
# and further SSL certificates creation.
networks:
  https_revproxy:
    external:
      name: ${APPS_NETWORK}
  airflow: